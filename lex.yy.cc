
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 108
#define YY_END_OF_BUFFER 109
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[524] =
    {   0,
      109,  107,  108,    2,  107,  108,    1,  108,   44,  107,
      108,  107,  108,   39,  107,  108,   41,  107,  108,  107,
      108,   12,  107,  108,   13,  107,  108,   37,  107,  108,
       35,  107,  108,   68,  107,  108,   36,  107,  108,   34,
      107,  108,   38,  107,  108,  100,  107,  108,  100,  107,
      108,   15,  107,  108,   14,  107,  108,   46,  107,  108,
       45,  107,  108,   47,  107,  108,   33,  107,  108,   97,
      107,  108,16480,   97,  107,  108,16480,    8,  107,  108,
       10,  107,  108,   40,  107,  108,   97,  107,  108,16480,
       97,  107,  108,16480,   97,  107,  108,16480,   97,  107,

      108,16480,   97,  107,  108,16480,   97,  107,  108,16480,
       97,  107,  108,16480,   97,  107,  108,16480,   97,  107,
      108,16480,   97,  107,  108,16480,   97,  107,  108,16480,
       97,  107,  108,16480,   97,  107,  108,16480,   97,  107,
      108,16480,   97,  107,  108,16480,    4,  107,  108,   42,
      107,  108,    6,  107,  108,   43,  107,  108,    2,   61,
      105,   52,    7,   64,   54,  103,   50,   66,   48,   67,
       49,   69,  101,    3,   51,  101,   99,  100,  100,  100,
      100,   11,    5,    9,   56,   62,   60,   63,   57,   97,
    16480,   53,   97,16480,   97,16480,   97,16480,   97,16480,

       97,16480,   97,16480,   22,   97,16480,   97,16480,   97,
    16480,   97,16480,   97,16480,   97,16480,   97,16480,   27,
       97,16480,   97,16480,   97,16480,   97,16480,   97,16480,
       97,16480,   97,16480,   97,16480,   97,16480,   97,16480,
       97,16480,   97,16480,   55,   65,  105,  103,   16,  101,
       99,  100,   99,  100,  102,  100,  100,   98,   58,   59,
     8288,  106,  104,   97,16480,   97,16480,   97,16480,   97,
    16480,   97,16480,   97,16480,   97,16480,   97,16480,   97,
    16480,   97,16480,   97,16480,   25,   97,16480,   97,16480,
       79,   97,16480,   97,16480,   97,16480,   97,16480,   97,

    16480,   97,16480,   97,16480,   97,16480,   97,16480,   97,
    16480,   97,16480,   97,16480,   97,16480,   97,16480,   97,
    16480,   97,16480,  101,   99,  100,   99,  100,  102,   98,
       98,  106,  104,   17,   97,16480,   97,16480,   19,   97,
    16480,   78,   97,16480,   97,16480,   97,16480,   97,16480,
       97,16480,   23,   97,16480,   97,16480,   97,16480,   97,
    16480,   26,   97,16480,   86,   80,   97,16480,   97,16480,
       97,16480,   97,16480,   97,16480,   97,16480,   97,16480,
       97,16480,   97,16480,   97,16480,   97,16480,   97,16480,
       82,   97,16480,   97,16480,   97,16480,   98,   98,   18,

       97,16480,   85,   72,   97,16480,   97,16480,   97,16480,
       97,16480,   97,16480,   76,   83,   97,16480,   87,   97,
    16480,   97,16480,   81,   97,16480,   97,16480,   97,16480,
       97,16480,   97,16480,   97,16480,   97,16480,   97,16480,
       97,16480,   89,   97,16480,   32,   97,16480,   97,16480,
       97,16480,   77,   97,16480,   90,   91,   24,   97,16480,
       97,16480,   28,   97,16480,   88,   70,   97,16480,   31,
       97,16480,   73,   97,16480,   97,16480,   29,   97,16480,
       97,16480,   97,16480,   97,16480,   97,16480,   21,   97,
    16480,   84,   90,   90,   97,16480,   30,   97,16480,   94,

       95,   97,16480,   97,16480,   20,   97,16480,   71,   97,
    16480,   92,   93,   94,   94,   74,   97,16480,   75,   97,
    16480,   92,   92
    } ;

static yyconst flex_int16_t yy_accept[299] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   12,   14,   17,
       20,   22,   25,   28,   31,   34,   37,   40,   43,   46,
       49,   52,   55,   58,   61,   64,   67,   70,   74,   78,
       81,   84,   87,   91,   95,   99,  103,  107,  111,  115,
      119,  123,  127,  131,  135,  139,  143,  147,  150,  153,
      156,  159,  160,  161,  161,  162,  162,  163,  164,  165,
      166,  166,  167,  167,  168,  169,  170,  171,  172,  173,
      173,  174,  175,  176,  177,  179,  180,  180,  181,  182,
      182,  183,  184,  185,  186,  187,  188,  189,  190,  190,
      190,  192,  192,  192,  193,  195,  197,  199,  201,  203,

      205,  208,  210,  212,  214,  216,  218,  220,  223,  225,
      227,  229,  231,  233,  235,  237,  239,  241,  243,  245,
      246,  247,  247,  248,  248,  248,  249,  249,  250,  250,
      251,  253,  255,  255,  256,  257,  258,  259,  260,  261,
      261,  262,  262,  263,  263,  263,  264,  264,  266,  268,
      270,  272,  274,  276,  278,  280,  282,  284,  286,  289,
      291,  294,  296,  298,  300,  302,  304,  306,  308,  310,
      312,  314,  316,  318,  320,  322,  324,  324,  325,  327,
      329,  330,  331,  332,  332,  333,  333,  333,  334,  334,
      337,  339,  342,  345,  347,  349,  351,  353,  356,  358,

      360,  362,  365,  365,  366,  369,  371,  373,  375,  377,
      379,  381,  383,  385,  387,  389,  391,  394,  396,  398,
      399,  400,  403,  403,  404,  407,  409,  411,  413,  413,
      413,  415,  419,  419,  420,  422,  424,  427,  429,  431,
      433,  435,  437,  439,  441,  443,  443,  444,  446,  449,
      451,  453,  456,  457,  457,  458,  461,  463,  466,  466,
      467,  470,  473,  476,  478,  481,  483,  483,  483,  485,
      487,  489,  492,  492,  493,  494,  495,  497,  497,  497,
      500,  501,  501,  502,  504,  506,  509,  512,  513,  513,
      514,  515,  516,  519,  522,  523,  524,  524

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   26,   26,   26,   27,   28,
       29,   29,   29,   29,   29,   30,   29,   29,   29,   29,
       29,   29,   29,   29,   31,   29,   29,   32,   29,   29,
       33,   34,   35,   36,   29,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   29,   46,   47,   48,   49,
       50,   51,   29,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    2,    2,    1,    1,    1,    1,    1,    2,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    4,    4,    4,    5,    5,
        5,    5,    1,    1,    1,    1,    4,    4,    4,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        6,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[318] =
    {   0,
        0,    0,  392, 1142,  388, 1142,  362,   60,   43,   61,
       61, 1142, 1142,  361,   58, 1142,   59,   57,   66,   81,
       61,  351, 1142,   65,  347,   67, 1142,  100,  112, 1142,
     1142,  345,  121,  123,  135,  132,  140,  143,  145,  154,
      156,  158,  168,  198,  202,  206,  214, 1142,   69, 1142,
     1142,  360, 1142,   99, 1142,  150, 1142, 1142, 1142, 1142,
       72, 1142,  180, 1142, 1142, 1142, 1142, 1142, 1142,  334,
      201, 1142, 1142,  219,  252,    0,  272,   55,   71,    0,
     1142, 1142, 1142,  308, 1142, 1142, 1142,  301,  224,  293,
      232,  135,  158, 1142,  250,  271,  285,  293,  306,  308,

      311,  316,  319,  324,  332,  334,  337,  342,  345,  354,
      350,  358,  362,  374,  370,  378,  386,  398,  407, 1142,
     1142,  146,  157,  272,  160,  216,  289, 1142,  400, 1142,
       74,  134,  245,  406, 1142, 1142,  366, 1142, 1142,  268,
      255,  205, 1142,  295,  247, 1142,  424,  435,  438,  447,
      452,  457,  460,  462,  465,  470,  474,  484,  487,  489,
      492,  505,  510,  514,  522,  524,  526,  534,  538,  542,
      550,  547,  555,  559,  568,  563,  463,  562, 1142, 1142,
     1142,  119,  238,  267,  271,  529,  308,  324,  579,  592,
      605,  609,  613,  617,  625,  627,  629,  637,  639,  641,

      650,  652,  654,  243,  664,  675,  677,  685,  689,  687,
      699,  703,  707,  711,  715,  723,  732,  745,  747, 1142,
     1142,  750,  758,  234,  768,  770,  773,  781,  778,  181,
      783,  791,  793,  229,  803,  805,  807,  821,  824,  826,
      834,  838,  842,  846,  850,  860,  221,  865,  870,  875,
      878,  883,  566,  167,  158,  887,  895,  899,  903,  191,
      913,  915,  917,  925,  935,  937,  939,  134,  947,  949,
      951,  959,  961,  175,  704,  948,  971,  973,  115,  975,
      972,   64,   53,  992,  995, 1000, 1003,  996,   44,   34,
      999, 1002, 1022, 1024, 1011, 1020, 1142, 1039, 1045, 1050,

     1055, 1061, 1065, 1069, 1075, 1081, 1087, 1093, 1098, 1104,
     1108, 1112, 1118, 1123, 1129, 1133, 1136
    } ;

static yyconst flex_int16_t yy_def[318] =
    {   0,
      297,    1,  297,  297,  297,  297,  297,  298,  297,  297,
      299,  297,  297,  297,  297,  297,  297,  297,  297,  297,
       20,  297,  297,  297,  297,  297,  297,  300,  300,  297,
      297,  297,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  297,  297,  297,
      297,  297,  297,  298,  297,  301,  297,  297,  297,  297,
      299,  297,  302,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,   21,  297,  297,  297,  303,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  304,
      300,  305,  306,  297,  300,  300,  300,  300,  300,  300,

      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  297,
      297,  298,  298,  301,  299,  299,  302,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  303,  297,  297,  304,
      304,  305,  297,  307,  306,  297,  308,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  297,  297,  297,  297,
      297,  297,  297,  305,  305,  307,  306,  306,  308,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,

      300,  300,  297,  297,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  297,
      297,  300,  297,  297,  300,  300,  300,  300,  309,  310,
      300,  300,  297,  297,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  297,  297,  300,  300,  300,
      300,  300,  311,  310,  310,  300,  300,  300,  297,  297,
      300,  300,  300,  300,  300,  300,  312,  313,  300,  300,
      300,  300,  297,  297,  311,  311,  300,  314,  315,  300,
      316,  313,  313,  300,  300,  300,  300,  317,  315,  315,
      316,  316,  300,  300,  317,  317,    0,  297,  297,  297,

      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297
    } ;

static yyconst flex_int16_t yy_nxt[1207] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   22,
       23,   24,   25,   26,   27,   28,   28,   28,   28,   29,
       28,   28,   30,    4,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   28,   40,   28,   41,   28,   28,   28,
       28,   42,   43,   44,   45,   46,   47,   28,   28,   28,
       48,   49,   50,   51,   55,   57,   58,   59,   62,   65,
       82,   70,   67,   71,   71,   71,   72,   76,   76,   62,
       66,   68,   69,   60,   83,  135,   84,   85,   73,   87,
       88,  120,  297,   56,   63,   74,  290,   75,   75,   76,

      136,   89,   89,   55,  179,   63,  290,   77,   90,  135,
       78,   79,   80,   89,   89,  283,   92,  136,  297,   93,
       90,   77,   89,   89,   89,   89,  283,   78,  179,   90,
      121,   90,   56,   89,   89,   79,   89,   89,   80,  143,
       90,   89,   89,   90,   89,   89,   89,   89,   90,  220,
       55,   90,   54,   90,  123,   89,   89,   89,   89,   89,
       89,   55,   90,  180,   90,  146,   90,   62,  144,   89,
       89,   97,  100,  220,   96,   95,   90,  290,   98,   56,
      180,  101,   61,  124,   99,  274,  102,  126,  103,  105,
       56,  147,  106,   63,  107,  108,  283,  104,  111,   89,

       89,  260,  109,   89,   89,  110,   90,   89,   89,  143,
       90,  112,  113,  127,   90,   89,   89,   71,   71,   71,
      255,  114,   90,   62,  115,   89,   89,  129,  130,  255,
      130,  247,   90,   89,   89,   71,   71,   71,  144,  234,
       90,  129,  130,  255,  224,  129,  130,  130,  130,   63,
      117,   89,   89,  204,  146,  118,  116,  119,   90,  129,
      130,  134,  134,  134,  141,  130,   74,  221,   75,   75,
       76,  143,   89,   89,   54,  143,  123,  141,   77,   90,
      147,  131,  132,  133,  221,  133,   89,   89,  134,  134,
      134,   61,   77,   90,   89,   89,  126,  142,  131,  185,

      144,   90,  141,  148,  144,  124,  132,   89,   89,   89,
       89,  149,   89,   89,   90,  146,   90,   89,   89,   90,
       89,   89,  127,  139,   90,   89,   89,   90,  186,  151,
      138,  146,   90,   89,   89,   89,   89,  150,   89,   89,
       90,  147,   90,   89,   89,   90,   89,   89,  128,  153,
       90,   89,   89,   90,  152,   89,   89,  147,   90,   89,
       89,   52,   90,   89,   89,  154,   90,   94,  155,   86,
       90,   89,   89,  156,   81,   89,   89,  157,   90,   89,
       89,  158,   90,   64,   53,  159,   90,   89,   89,   52,
      160,  297,  163,  297,   90,  182,  183,  297,  161,   89,

       89,  297,  162,  164,  166,  297,   90,  165,   89,   89,
      168,  177,  182,  177,  170,   90,  178,  178,  178,  297,
      183,  167,  134,  134,  134,  169,  145,  297,  171,  297,
      172,  188,  297,  181,  297,  181,   89,   89,  173,   89,
       89,  297,  174,   90,  175,  297,   90,  181,   89,   89,
      297,  176,  181,   89,   89,   90,  297,  189,   89,   89,
       90,   89,   89,   89,   89,   90,   89,   89,   90,  297,
       90,   89,   89,   90,  191,   89,   89,  297,   90,  178,
      178,  178,   90,  297,  190,   89,   89,  192,   89,   89,
       89,   89,   90,  203,  203,   90,  196,   90,  297,  197,

       90,  297,  204,  193,  297,  198,   89,   89,  297,  194,
      195,   89,   89,   90,  200,   89,   89,  199,   90,  297,
      201,  297,   90,   89,   89,   89,   89,   89,   89,  297,
       90,  142,   90,  185,   90,   89,   89,  297,  202,   89,
       89,  297,   90,   89,   89,  297,   90,  205,   89,   89,
       90,   89,   89,  297,  206,   90,   89,   89,   90,  297,
       89,   89,  186,   90,   89,   89,  210,   90,  207,   89,
       89,   90,  209,  208,  297,  297,   90,  297,  178,  178,
      178,  145,  275,  275,  275,  297,  188,  211,  297,  130,
      214,  130,  212,   89,   89,  213,  215,  297,  217,  216,

       90,  297,  297,  130,  218,  297,   89,   89,  130,  219,
       89,   89,  189,   90,  223,  223,  297,   90,   89,   89,
      297,   90,  297,  224,  297,   90,   89,   89,   89,   89,
       89,   89,  297,   90,  297,   90,  297,   90,   89,   89,
      229,  229,   89,   89,  297,   90,  297,   90,  297,   90,
      222,   89,   89,   89,   89,  203,  203,  297,   90,  297,
       90,  297,   90,  297,  204,  233,  233,  297,  297,  226,
      225,  297,   90,  297,  234,  228,   89,   89,   89,   89,
      297,  227,  297,   90,  297,   90,   89,   89,   89,   89,
       89,   89,  231,   90,  297,   90,  297,   90,  297,  230,

       89,   89,  297,  232,   89,   89,  297,   90,   89,   89,
      297,   90,   89,   89,  297,   90,   89,   89,  297,   90,
      275,  275,  275,   90,   89,   89,  297,  235,  236,  238,
      297,   90,  297,  246,  246,  297,  239,  297,  237,  297,
       90,  241,  247,  240,  297,  242,   89,   89,   89,   89,
      243,   89,   89,   90,  297,   90,  297,  297,   90,  223,
      223,  297,  297,  244,  297,  245,   90,  297,  224,   89,
       89,   89,   89,  297,   89,   89,   90,  297,   90,  229,
      229,   90,   89,   89,   89,   89,   90,  249,  297,   90,
      297,   90,   89,   89,  233,  233,  297,  297,  248,   90,

      297,   90,  297,  234,   89,   89,   89,   89,  259,  259,
      297,   90,  297,   90,  297,   90,  297,  260,  250,  251,
      297,  252,   89,   89,  297,   89,   89,   89,   89,   90,
      297,  256,   90,  297,   90,   89,   89,  297,  230,   89,
       89,  297,   90,   89,   89,  297,   90,  267,  267,  297,
       90,   89,   89,  258,   90,  297,  257,  297,   90,  297,
      261,  246,  246,  297,  263,  262,   89,   89,   90,  297,
      247,   89,   89,   90,  297,  297,   89,   89,   90,   89,
       89,  265,  266,   90,  273,  273,   90,  264,   89,   89,
      297,   90,  297,  274,  297,   90,   89,   89,  269,  297,

       89,   89,  297,   90,  259,  259,  268,   90,  297,  270,
      297,   90,  297,  260,   89,   89,   89,   89,   89,   89,
      297,   90,  297,   90,  297,   90,  278,  278,  297,  271,
      297,  272,  297,   90,  297,  277,   89,   89,   89,   89,
      267,  267,  297,   90,  297,   90,  297,   90,   89,   89,
       89,   89,   89,   89,  297,   90,  297,   90,  297,   90,
       89,   89,  273,  273,  275,  275,  275,   90,  297,   90,
      297,  274,   89,   89,  278,  278,   89,   89,  280,   90,
      297,   90,  297,   90,  297,  279,  297,  284,  291,  291,
      291,  286,  297,   89,   89,  285,   89,   89,  297,  268,

       90,   89,   89,   90,   89,   89,  297,  297,   90,  297,
      297,   90,  295,  295,  295,  291,  291,  291,  291,  291,
      291,  297,  287,   89,   89,   89,   89,  295,  295,  295,
       90,  293,   90,  279,  297,  294,  295,  295,  295,   54,
       54,   54,   54,   54,   54,   61,   61,   61,   61,   61,
       61,   91,   91,   91,   91,  122,  122,  122,  122,  122,
      122,  125,  125,  125,  125,  125,  125,  137,  137,  140,
      140,  140,  140,  140,  140,  142,  142,  142,  142,  142,
      142,  145,  145,  145,  145,  145,  145,  184,  184,  184,
      184,  184,  184,  187,  187,  187,  187,  187,  187,  253,

      297,  253,  253,  253,  254,  254,  254,  254,  254,  254,
      276,  276,  276,  281,  297,  281,  281,  281,  282,  282,
      282,  282,  282,  282,  288,  297,  288,  288,  288,  289,
      289,  289,  289,  289,  289,  292,  292,  292,  296,  296,
      296,    3,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,

      297,  297,  297,  297,  297,  297
    } ;

static yyconst flex_int16_t yy_chk[1207] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    8,    9,    9,   10,   11,   15,
       24,   18,   17,   18,   18,   18,   19,   21,   21,   61,
       15,   17,   17,   10,   24,   78,   24,   24,   19,   26,
       26,   49,   21,    8,   11,   20,  290,   20,   20,   20,

       79,   28,   28,   54,  131,   61,  289,   20,   28,   78,
       20,   20,   20,   29,   29,  283,   29,   79,   21,   29,
       29,   20,   33,   33,   34,   34,  282,   20,  131,   33,
       49,   34,   54,   36,   36,   20,   35,   35,   20,   92,
       36,   37,   37,   35,   38,   38,   39,   39,   37,  182,
      122,   38,   56,   39,   56,   40,   40,   41,   41,   42,
       42,  123,   40,  132,   41,   93,   42,  125,   92,   43,
       43,   35,   36,  182,   34,   33,   43,  279,   35,  122,
      132,   36,   63,   56,   35,  274,   37,   63,   37,   38,
      123,   93,   38,  125,   39,   40,  268,   37,   42,   44,

       44,  260,   40,   45,   45,   41,   44,   46,   46,  142,
       45,   43,   43,   63,   46,   47,   47,   71,   71,   71,
      255,   43,   47,  126,   43,   89,   89,   71,   71,  254,
       71,  247,   89,   91,   91,   74,   74,   74,  142,  234,
       91,   71,   71,  230,  224,   74,   74,   71,   74,  126,
       45,   95,   95,  204,  145,   46,   44,   47,   95,   74,
       74,  133,  133,  133,  141,   74,   75,  183,   75,   75,
       75,  184,   96,   96,  124,  185,  124,  140,   75,   96,
      145,   75,   75,   77,  183,   77,   97,   97,   77,   77,
       77,  127,   75,   97,   98,   98,  127,  144,   75,  144,

      184,   98,   90,   95,  185,  124,   75,   99,   99,  100,
      100,   96,  101,  101,   99,  187,  100,  102,  102,  101,
      103,  103,  127,   88,  102,  104,  104,  103,  144,   98,
       84,  188,  104,  105,  105,  106,  106,   97,  107,  107,
      105,  187,  106,  108,  108,  107,  109,  109,   70,  100,
      108,  111,  111,  109,   99,  110,  110,  188,  111,  112,
      112,   52,  110,  113,  113,  101,  112,   32,  102,   25,
      113,  115,  115,  103,   22,  114,  114,  104,  115,  116,
      116,  105,  114,   14,    7,  106,  116,  117,  117,    5,
      107,    3,  111,    0,  117,  137,  137,    0,  109,  118,

      118,    0,  110,  111,  113,    0,  118,  112,  119,  119,
      114,  129,  137,  129,  115,  119,  129,  129,  129,    0,
      137,  113,  134,  134,  134,  114,  147,    0,  116,    0,
      117,  147,    0,  134,    0,  134,  148,  148,  117,  149,
      149,    0,  118,  148,  118,    0,  149,  134,  150,  150,
        0,  119,  134,  151,  151,  150,    0,  147,  152,  152,
      151,  153,  153,  154,  154,  152,  155,  155,  153,    0,
      154,  156,  156,  155,  149,  157,  157,    0,  156,  177,
      177,  177,  157,    0,  148,  158,  158,  150,  159,  159,
      160,  160,  158,  161,  161,  159,  153,  160,    0,  154,

      161,    0,  161,  151,    0,  155,  162,  162,    0,  152,
      152,  163,  163,  162,  157,  164,  164,  156,  163,    0,
      158,    0,  164,  165,  165,  166,  166,  167,  167,    0,
      165,  186,  166,  186,  167,  168,  168,    0,  160,  169,
      169,    0,  168,  170,  170,    0,  169,  162,  172,  172,
      170,  171,  171,    0,  163,  172,  173,  173,  171,    0,
      174,  174,  186,  173,  176,  176,  167,  174,  164,  175,
      175,  176,  166,  165,    0,    0,  175,    0,  178,  178,
      178,  189,  253,  253,  253,    0,  189,  168,    0,  178,
      171,  178,  169,  190,  190,  170,  172,    0,  174,  173,

      190,    0,    0,  178,  175,    0,  191,  191,  178,  176,
      192,  192,  189,  191,  193,  193,    0,  192,  194,  194,
        0,  193,    0,  193,    0,  194,  195,  195,  196,  196,
      197,  197,    0,  195,    0,  196,    0,  197,  198,  198,
      199,  199,  200,  200,    0,  198,    0,  199,    0,  200,
      191,  201,  201,  202,  202,  203,  203,    0,  201,    0,
      202,    0,  203,    0,  203,  205,  205,    0,    0,  195,
      194,    0,  205,    0,  205,  197,  206,  206,  207,  207,
        0,  196,    0,  206,    0,  207,  208,  208,  210,  210,
      209,  209,  200,  208,    0,  210,    0,  209,    0,  199,

      211,  211,    0,  201,  212,  212,    0,  211,  213,  213,
        0,  212,  214,  214,    0,  213,  215,  215,    0,  214,
      275,  275,  275,  215,  216,  216,    0,  206,  207,  209,
        0,  216,    0,  217,  217,    0,  210,    0,  208,    0,
      217,  212,  217,  211,    0,  213,  218,  218,  219,  219,
      214,  222,  222,  218,    0,  219,    0,    0,  222,  223,
      223,    0,    0,  215,    0,  216,  223,    0,  223,  225,
      225,  226,  226,    0,  227,  227,  225,    0,  226,  229,
      229,  227,  228,  228,  231,  231,  229,  219,    0,  228,
        0,  231,  232,  232,  233,  233,    0,    0,  218,  232,

        0,  233,    0,  233,  235,  235,  236,  236,  237,  237,
        0,  235,    0,  236,    0,  237,    0,  237,  226,  227,
        0,  228,  238,  238,    0,  239,  239,  240,  240,  238,
        0,  231,  239,    0,  240,  241,  241,    0,  229,  242,
      242,    0,  241,  243,  243,    0,  242,  244,  244,    0,
      243,  245,  245,  236,  244,    0,  235,    0,  245,    0,
      238,  246,  246,    0,  240,  239,  248,  248,  246,    0,
      246,  249,  249,  248,    0,    0,  250,  250,  249,  251,
      251,  242,  243,  250,  252,  252,  251,  241,  256,  256,
        0,  252,    0,  252,    0,  256,  257,  257,  245,    0,

      258,  258,    0,  257,  259,  259,  244,  258,    0,  248,
        0,  259,    0,  259,  261,  261,  262,  262,  263,  263,
        0,  261,    0,  262,    0,  263,  264,  264,    0,  250,
        0,  251,    0,  264,    0,  257,  265,  265,  266,  266,
      267,  267,    0,  265,    0,  266,    0,  267,  269,  269,
      270,  270,  271,  271,    0,  269,    0,  270,    0,  271,
      272,  272,  273,  273,  276,  276,  276,  272,    0,  273,
        0,  273,  277,  277,  278,  278,  280,  280,  266,  277,
        0,  278,    0,  280,    0,  264,    0,  269,  281,  281,
      281,  271,    0,  284,  284,  270,  285,  285,    0,  267,

      284,  286,  286,  285,  287,  287,    0,    0,  286,    0,
        0,  287,  288,  288,  288,  291,  291,  291,  292,  292,
      292,    0,  277,  293,  293,  294,  294,  295,  295,  295,
      293,  284,  294,  278,    0,  285,  296,  296,  296,  298,
      298,  298,  298,  298,  298,  299,  299,  299,  299,  299,
      299,  300,  300,  300,  300,  301,  301,  301,  301,  301,
      301,  302,  302,  302,  302,  302,  302,  303,  303,  304,
      304,  304,  304,  304,  304,  305,  305,  305,  305,  305,
      305,  306,  306,  306,  306,  306,  306,  307,  307,  307,
      307,  307,  307,  308,  308,  308,  308,  308,  308,  309,

        0,  309,  309,  309,  310,  310,  310,  310,  310,  310,
      311,  311,  311,  312,    0,  312,  312,  312,  313,  313,
      313,  313,  313,  313,  314,    0,  314,  314,  314,  315,
      315,  315,  315,  315,  315,  316,  316,  316,  317,  317,
      317,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,

      297,  297,  297,  297,  297,  297
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "hw1.l"
#line 3 "hw1.l"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

static int process_keyword();
static int process_operator();
static int process_modifier();
static int process_datatype();
static int process_struct();
static int process_enum();
static int process_union();
static int process_literal();
static int process_function();
static int process_identifier();

int lineno;

int yywrap(void);
static void skip_comment(void);

#line 878 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 37 "hw1.l"


#line 1019 "lex.yy.cc"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 298 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1142 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 39 "hw1.l"
{ ++lineno; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 40 "hw1.l"
{}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 41 "hw1.l"
{ skip_comment();     }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 43 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 44 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 45 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 46 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 47 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 49 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 50 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 52 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 53 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 54 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 55 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 56 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 57 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 58 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 59 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 60 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 61 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 62 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 63 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 64 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 65 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 66 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 67 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 68 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 69 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 70 "hw1.l"
{ process_keyword();  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 71 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 72 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 73 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 74 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 75 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 76 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 79 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 80 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 81 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 82 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 83 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 84 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 85 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 86 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 87 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 88 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 89 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 90 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 91 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 92 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 93 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 94 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 95 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 96 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 97 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 98 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 99 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 100 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 101 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 102 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 103 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 104 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 105 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 106 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 107 "hw1.l"
{ process_operator(); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 108 "hw1.l"
{ process_modifier(); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 109 "hw1.l"
{ process_modifier(); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 110 "hw1.l"
{ process_modifier(); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 111 "hw1.l"
{ process_modifier(); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 112 "hw1.l"
{ process_modifier(); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 113 "hw1.l"
{ process_modifier(); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 114 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 115 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 116 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 117 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 118 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 119 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 120 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 121 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 123 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 124 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 125 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 126 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 127 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 128 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 130 "hw1.l"
{ 
											process_datatype(); 
											process_enum();
										}
	YY_BREAK
case 91:
/* rule 91 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 134 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 135 "hw1.l"
{ 
											process_datatype();
								  			process_struct();  
										}	 
	YY_BREAK
case 93:
/* rule 93 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 139 "hw1.l"
{ process_datatype(); } // strcut {} variable_name
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 140 "hw1.l"
{ 
											process_datatype(); 
											process_union();
										}
	YY_BREAK
case 95:
/* rule 95 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 144 "hw1.l"
{ process_datatype(); }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 146 "hw1.l"
{ process_function(); } // main(int argc, char *argv[]) 
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 147 "hw1.l"
{ process_identifier(); } 
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 148 "hw1.l"
{ process_literal(); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 149 "hw1.l"
{ process_literal(); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 150 "hw1.l"
{ process_literal(); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 152 "hw1.l"
{ process_literal(); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 153 "hw1.l"
{ process_literal(); }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 155 "hw1.l"
{ process_literal(); }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 156 "hw1.l"
{ process_literal(); }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 158 "hw1.l"
{ process_literal(); } 
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 159 "hw1.l"
{ process_literal(); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "hw1.l"
{ fprintf(stderr, "%d: unexpected character `%c'\n", lineno, yytext[0]); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 163 "hw1.l"
ECHO;
	YY_BREAK
#line 1678 "lex.yy.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 298 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 298 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 297);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 162 "hw1.l"



int main(int argc, char *argv[])
{
	lineno = 0;
	yyin = fopen(argv[1], "r");
	yylex();
	printf("# Line: %d\n",lineno);
	fclose(yyin);

	return 0;
}

int yywrap()
{
	return 1;
}


static void skip_comment()
{
	int c1, c2;

	c1 = input();
	c2 = input();

	while (c2 != EOF && !(c1 == '*' && c2 == '/')) {
		if (c1 == '\n')
			++lineno;
		c1 = c2;
		c2 = input();
	}
}

static int process_keyword() 
{
	printf("#%d\tKeyword:\t%s\n",lineno + 1,yytext);

	return 1;
}

static int process_operator() 
{
	printf("#%d\tOperator:\t%s\n",lineno + 1,yytext);

	return 1;
}

static int process_modifier() 
{
	printf("#%d\tModifier:\t%s\n",lineno + 1,yytext);

	return 1;
}

static int process_datatype() 
{
	printf("#%d\tDataType:\t%s\n",lineno + 1,yytext);

	return 1;
}

static int process_literal() 
{
	printf("#%d\tLiteral:\t%s\n",lineno + 1,yytext);

	return 1;
}

static int process_function()
{
	printf("#%d\tFunction:\t%s\n",lineno + 1,yytext);

	return 1;
}

static int process_identifier() 
{
	printf("#%d\tIdentifier\t%s\n",lineno + 1,yytext);

	return 1;
}

static int process_struct()
{
	return 1;
}

static int process_enum()
{
	return 1;
}

static int process_union()
{
	return 1;
}
